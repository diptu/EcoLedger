# File: infra/docker-compose.prod.yml
version: "3.9"

networks:
  ima_network:
    driver: bridge

services:
  ima-service:
    build:
      context: ..
      dockerfile: infra/Dockerfile.prod
    container_name: ima-service
    env_file: ../.env
    environment:
      ENV: "prod"
      DEBUG: "False"
      PORT: 8000
      BASE_URL: ${BASE_URL}
      DB_URI: ${DB_URI}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ima_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health/server || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  db:
    image: postgres:17-alpine
    container_name: ima-db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - ima_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: redis:7-alpine
    container_name: ima-redis
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ima_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
